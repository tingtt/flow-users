openapi: 3.0.0

info:
  description: |
    You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "2.0.0"
  title: "flow API: users"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

security:
  - cookieAuth: []

tags: []

paths:
  /:
    post:
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
      responses:
        201:
          description: Created
          headers:
            Set-Cookie:
              schema:
                type: string
                example: TOKEN=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPassword"
        400:
          description: Invalid request
        415:
          description: Unsupported media type
        422:
          description: Unprocessable entity
        500:
          description: Internal server error

    get:
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: Not found
        500:
          description: Internal server error

    patch:
      requestBody:
        $ref: "#/components/requestBodies/UpdateUser"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPassword"
        400:
          description: Invalid request
        404:
          description: Not found
        415:
          description: Unsupported media type
        422:
          description: Unprocessable entity
        500:
          description: Internal server error

    delete:
      responses:
        204:
          description: Deleted
        404:
          description: Not found
        500:
          description: Internal server error

  /{oauth_providers}/register:
    post:
      parameters:
        - $ref: "#/components/parameters/oauth_providers"
      requestBody:
        $ref: "#/components/requestBodies/OAuth2Connect"
      responses:
        201:
          description: Created
          headers:
            Set-Cookie:
              schema:
                type: string
                example: TOKEN=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPassword"
        500:
          description: Internal server error

  /{oauth_providers}/connect:
    post:
      parameters:
        - $ref: "#/components/parameters/oauth_providers"
      requestBody:
        $ref: "#/components/requestBodies/CreateUserOverOauth2"
      responses:
        200:
          description: Success
          headers:
            Set-Cookie:
              schema:
                type: string
                example: TOKEN=abcde12345; Path=/; HttpOnly
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /{oauth_providers}/refresh:
    post:
      responses:
        200:
          description: Success
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /{oauth_providers}:
    delete:
      parameters:
        - $ref: "#/components/parameters/oauth_providers"
      responses:
        204:
          description: Deleted
        404:
          description: Not found
        500:
          description: Internal server error

  /sign_in:
    post:
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        200:
          description: Success
          headers:
            Set-Cookie:
              schema:
                type: string
                example: TOKEN=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPassword"
        400:
          description: Invalid request
        415:
          description: Unsupported media type
        422:
          description: Unprocessable entity
        500:
          description: Internal server error

  /id:
    get:
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserId"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: TOKEN
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserWithoutPassword:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email

    CreateUserBody:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password

    UpdateUserBody:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    OAuth2ConnectBody:
      type: object
      properties:
        access_token:
          type: string
        expire_in:
          type: integer
        refresh_token:
          type: string
        refresh_token_expire_in:
          type: integer
      required:
        - access_token
        - expire_in
        - refresh_token

    CreateUserOverOauth2Body:
      type: object
      properties:
        access_token:
          type: string
        expire_in:
          type: integer
        refresh_token:
          type: string
        refresh_token_expire_in:
          type: integer
        password:
          type: string
      required:
        - access_token
        - expire_in
        - refresh_token
        - password

    UserId:
      type: object
      properties:
        id:
          type: integer

  requestBodies:
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
            required:
              - email
              - password

    CreateUser:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserBody"

    UpdateUser:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateUserBody"

    OAuth2Connect:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OAuth2ConnectBody"
    CreateUserOverOauth2:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserOverOauth2Body"

  parameters:
    oauth_providers:
      name: oauth_providers
      in: path
      required: true
      schema:
        type: string
        enum:
          - github
          - google
          - twitter
